# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PublicTransitAnalysis
                                 A QGIS plugin
 Heatmap to visualize the connection from one place to all stops of a public Transport net
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Julek Weck
        email                : j.weck@tu-braunschweig.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication #TODO ist QgsVectorLayer an der richtigen Stelle importiert?
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsVectorLayer

# personal imports
from console import console
from .stop import Stop
from .station import Station
import sys
import requests, json
import geopandas as gpd
import pandas as pd

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .public_transit_analysis_dialog import PublicTransitAnalysisDialog
import os.path


class PublicTransitAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PublicTransitAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Public Transit Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PublicTransitAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/public_transit_analysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Public Transit Analysis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Public Transit Analysis'),
                action)
            self.iface.removeToolBarIcon(action)

    """
    My own methods
    """

    def check_grizzly_server_is_running(self):
        if self.dlg.rb_automatic_otp_start.isChecked():
            self.iface.messageBar().pushMessage("This is not implemented yet. \nYou have to choose another option")
        elif self.dlg.rb_otp_manually_started_8080.isChecked():
            url = "http://localhost:8080/"
            print(url)
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            if self.dlg.le_port_number.text() != "":
                port_number = self.dlg.le_port_number.text()
                url = f"http://localhost:{port_number}/"
                print(f"request url: {url}")
            else:
                self.iface.messageBar().pushMessage("You have to enter a port number for OTP")
        else:
            self.iface.messageBar().pushMessage("How to start OTP. There has to be at least one option choosen")
        try:
            # Get Url
            get = requests.get(url)
            # if the request succeeds
            if get.status_code == 200:
                return True
            else:
                return False
            # Exception
        except requests.exceptions.RequestException as e:
            self.iface.messageBar().pushMessage("Grizzly server is not running or runs on an different port")
            return False

    def get_request_url(self):
        if self.dlg.rb_otp_manually_started_8080.isChecked():
            return "http://localhost:8080/otp/gtfs/v1"
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            port_number = self.dlg.le_port_number.text()
            return f"http://localhost:{port_number}/otp/gtfs/v1"

    def query_all_stops(self):
        if self.check_grizzly_server_is_running():
            url = self.get_request_url()
            queried_stops = requests.post(url, json={"query": "{stops{name, gtfsId, lat, lon, vehicleMode}}"})
            queried_stops = json.loads(queried_stops.content)
            queried_stops = queried_stops["data"]["stops"]
            return queried_stops
        else:
            print("stops could not be queried because OTP is not reachable")

    def create_dataframe_with_station_attributes(self, station_collection):
        name_collection = []
        average_trip_time_collection = []
        car_driving_time_collection = []
        travel_time_ratio_collection = []
        average_number_of_transfers_collection = []
        average_walk_distance_of_trip_collection = []
        trip_frequency_collection = []
        for station in station_collection:
            name_collection.append(station.name)
            average_trip_time_collection.append(station.average_trip_time)
            car_driving_time_collection.append(station.car_driving_time)
            travel_time_ratio_collection.append(station.travel_time_ratio)
            average_number_of_transfers_collection.append(station.average_number_of_transfers)
            average_walk_distance_of_trip_collection.append(station.average_walk_distance_of_trip)
            trip_frequency_collection.append(station.trip_frequency)
        df = pd.DataFrame(
            {
                "Name": name_collection,
                "travel_time_ratio": travel_time_ratio_collection,
                "average_number_of_transfers": average_number_of_transfers_collection,
                "trip_frequency_collection": trip_frequency_collection,
                "average_trip_time": average_trip_time_collection,
                "car_driving_time": car_driving_time_collection,
                "average_walk_distance_of_trip": average_walk_distance_of_trip_collection
            }
        )
        return df

    def create_stop_objects(self, queried_stops):
        stop_objects = []
        for data in queried_stops:
            stop = Stop(data["name"], data["gtfsId"], data["lat"], data["lon"], data["vehicleMode"])
            stop_objects.append(stop)
        return stop_objects.copy()

    def create_stations(self, stop_collection):
        station_collection = []
        current_stop_name = stop_collection[0].name
        related_stops = [stop_collection[0]]
        for element in stop_collection[1:]:
            if element.name == current_stop_name:
                related_stops.append(element)
            else:
                station = Station(current_stop_name, related_stops.copy())
                station_collection.append(station)
                current_stop_name = element.name
                related_stops.clear()
                related_stops.append(element)
        return station_collection

    def export_stations_as_geopackage(self, station_collection, layer_name):
        mean_lat_collection = []
        mean_lon_collection = []
        for station in station_collection:
            mean_lat_collection.append(station.mean_lat)
            mean_lon_collection.append(station.mean_lon)
        station_attributes = self.create_dataframe_with_station_attributes(station_collection)
        gdf = gpd.GeoDataFrame(station_attributes,
                               geometry=gpd.points_from_xy(mean_lon_collection, mean_lat_collection), crs="EPSG:4326")
        gdf.to_file(layer_name, driver='GPKG', layer=layer_name)
        layer = QgsVectorLayer(layer_name, layer_name, "ogr") #TODO funktioniert das so?
        QgsProject.instance().addMapLayer(layer)


    def stations_from_otp_to_gpkg(self):
        self.iface.messageBar().pushMessage("The button was pressed, your request is working")
        stops_as_dict = {}
        all_stops = []
        all_stations = []
        stops_as_dict = self.query_all_stops()
        all_stops = self.create_stop_objects(stops_as_dict)
        all_stations = self.create_stations(all_stops)
        self.export_stations_as_geopackage(all_stations, "all_stations_without_itineraries")
    def not_implemented_yet(self):
        self.iface.messageBar().pushMessage("This function is optional and not implemented yet")
    def testfunction(self):
        print(self.check_grizzly_server_is_running())




    """
    Run is the method, which connects GUI elements to methods and is running, while the plugin is open
    """
    def run(self):
        """Run method that performs all the real work"""
        #console.show_console()
        #print("hallo Welt")
        self.iface.messageBar().pushMessage("HAllo Welt")
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PublicTransitAnalysisDialog()
            self.dlg.pb_start_check_OTP.clicked.connect(self.not_implemented_yet)
            self.dlg.pb_get_stops_from_otp.clicked.connect(self.not_implemented_yet)
            self.dlg.pb_get_stations_from_otp.clicked.connect(self.stations_from_otp_to_gpkg)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("ich schreibe was direkt in die Konsole als Test")
