# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PublicTransitAnalysis
                                 A QGIS plugin
 Heatmap to visualize the connection from one place to all stops of a public Transport net
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Julek Weck
        email                : j.weck@tu-braunschweig.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication #TODO ist QgsVectorLayer an der richtigen Stelle importiert?
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsVectorLayer, QgsPalLayerSettings, QgsTextFormat, QgsVectorLayerSimpleLabeling

# personal imports
from console import console
from .stop import Stop
from .station import Station
from .request import Request
import sys
import requests, json
import geopandas as gpd
import pandas as pd
from colour import Color # for colour gradients

# downloaded for symbology, don't know which packages I really need: https://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/vector.html#appearance-symbology-of-vector-layers
from qgis.core import (

  QgsApplication,

  QgsDataSourceUri,

  QgsCategorizedSymbolRenderer,

  QgsClassificationRange,

  QgsPointXY,

  QgsProject,

  QgsExpression,

  QgsField,

  QgsFields,

  QgsFeature,

  QgsFeatureRequest,

  QgsFeatureRenderer,

  QgsGeometry,

  QgsGraduatedSymbolRenderer,

  QgsMarkerSymbol,

  QgsMessageLog,

  QgsRectangle,

  QgsRendererCategory,

  QgsRendererRange,

  QgsSymbol,

  QgsVectorDataProvider,

  QgsVectorLayer,

  QgsVectorFileWriter,

  QgsWkbTypes,

  QgsSpatialIndex,

  QgsVectorLayerUtils

)


from qgis.core.additions.edit import edit


from qgis.PyQt.QtGui import (

    QColor,

)
# This is needed to create own graduated symbol renderer
from qgis.PyQt import QtGui


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .public_transit_analysis_dialog import PublicTransitAnalysisDialog
import os.path


class PublicTransitAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PublicTransitAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Public Transit Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PublicTransitAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/public_transit_analysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Public Transit Analysis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Public Transit Analysis'),
                action)
            self.iface.removeToolBarIcon(action)

    """
    My own methods
    """

    def check_grizzly_server_is_running(self):
        if self.dlg.rb_automatic_otp_start.isChecked():
            self.iface.messageBar().pushMessage("This is not implemented yet. \nYou have to choose another option")
        elif self.dlg.rb_otp_manually_started_8080.isChecked():
            url = "http://localhost:8080/"
            print(url)
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            if self.dlg.le_port_number.text() != "":
                port_number = self.dlg.le_port_number.text()
                url = f"http://localhost:{port_number}/"
                print(f"request url: {url}")
            else:
                self.iface.messageBar().pushMessage("You have to enter a port number for OTP")
        else:
            self.iface.messageBar().pushMessage("How to start OTP. There has to be at least one option choosen")
        try:
            # Get Url
            get = requests.get(url)
            # if the request succeeds
            if get.status_code == 200:
                return True
            else:
                return False
            # Exception
        except requests.exceptions.RequestException as e:
            self.iface.messageBar().pushMessage("Grizzly server is not running or runs on an different port")
            return False

    def get_request_url(self): #TODO add this to the right functions which need the url
        if self.dlg.rb_otp_manually_started_8080.isChecked():
            return "http://localhost:8080/otp/gtfs/v1"
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            port_number = self.dlg.le_port_number.text()
            return f"http://localhost:{port_number}/otp/gtfs/v1"

    def query_all_stops(self):
        if self.check_grizzly_server_is_running():
            url = self.get_request_url()
            queried_stops = requests.post(url, json={"query": "{stops{name, gtfsId, lat, lon, vehicleMode}}"})
            queried_stops = json.loads(queried_stops.content)
            queried_stops = queried_stops["data"]["stops"]
            return queried_stops
        else:
            print("stops could not be queried because OTP is not reachable")

    def create_dataframe_with_station_attributes(self, station_collection, poi:Request = None):
        """
        Codes of the negative numbers:
        -1: there is no Itinerary to/from this station -> not reachable
        -2: This is the point to which/ from which every itinerary goes

        """

        # The first row of the data frame will be the point to which/ from which every itinerary goes
        name_collection = ["Point of Interest"]
        average_trip_time_collection = [-2]
        car_driving_time_collection = [None]
        travel_time_ratio_collection = [-2]
        average_number_of_transfers_collection = [None]
        average_walk_distance_of_trip_collection = [None]
        trip_frequency_collection = [None]
        itineraries_collection = [None]
        max_distance_station_to_stop_collection = [None]

        #attributes for the poi object
        date_collection = [None]
        time_collection = [None]
        search_window_collection = [None]
        catchment_area_collection = [None]
        possible_start_stations_collection = [None]
        quality_category_collection = [None]

        if poi is not None:
            start_station_data = ""
            date_collection[0] = poi.date
            time_collection[0] = poi.time
            search_window_collection[0] = poi.search_window
            catchment_area_collection[0] = poi.catchment_area
            for start_station in poi.get_possible_start_stations():
                data = start_station + ", "
                start_station_data = start_station_data + data
            possible_start_stations_collection[0] = start_station_data
            quality_category_collection[0] = poi.get_letter_of_quality_category()



        for station in station_collection:
            itineraries_data = ""
            start_station_data = ""
            name_collection.append(station.name)
            if station.average_trip_time is not None:
                average_trip_time_collection.append(station.average_trip_time)
            else:
                average_trip_time_collection.append(-1)
            car_driving_time_collection.append(station.car_driving_time)
            if station.travel_time_ratio is not None:
                travel_time_ratio_collection.append(station.travel_time_ratio)
            else:
                travel_time_ratio_collection.append(-1)
            average_number_of_transfers_collection.append(station.average_number_of_transfers)
            average_walk_distance_of_trip_collection.append(station.average_walk_distance_of_trip)
            trip_frequency_collection.append(station.trip_frequency)
            for itinerary in station.selected_itineraries:
                data = f"{itinerary.route_numbers}, duration: {itinerary.duration}, startStation: {itinerary.start_station}, endStation:{itinerary.end_station};\n"
                itineraries_data = itineraries_data + data
                start_station = itinerary.start_station + ", "
                start_station_data = start_station_data + start_station
            itineraries_collection.append(itineraries_data)
            possible_start_stations_collection.append(start_station_data)
            max_distance_station_to_stop_collection.append(station.max_distance_station_to_stop)

            if poi is not None:
                date_collection.append(poi.date)
                time_collection.append(poi.time)
                search_window_collection.append(poi.search_window)
                catchment_area_collection.append(poi.catchment_area)
                quality_category_collection.append(None)

            else:
                date_collection.append(None)
                time_collection.append(None)
                search_window_collection.append(None)
                catchment_area_collection.append(None)
                quality_category_collection.append(None)

        df = pd.DataFrame(
            {
                "Name": name_collection,
                "travel_time_ratio": travel_time_ratio_collection,
                "average_number_of_transfers": average_number_of_transfers_collection,
                "trip_frequency_collection": trip_frequency_collection,
                "average_trip_time": average_trip_time_collection,
                "car_driving_time": car_driving_time_collection,
                "average_walk_distance_of_trip": average_walk_distance_of_trip_collection,
                "itinerary_overview": itineraries_collection,
                "max_distance_station_to_stop": max_distance_station_to_stop_collection,
                "date": date_collection,
                "time": time_collection,
                "search_window": search_window_collection,
                "catchment_area": catchment_area_collection,
                "possible_start_stations": possible_start_stations_collection,
                "quality_category": quality_category_collection

            }
        )
        return df

    def create_stop_objects(self, queried_stops):
        stop_objects = []
        for data in queried_stops:
            stop = Stop(data["name"], data["gtfsId"], data["lat"], data["lon"], data["vehicleMode"])
            stop_objects.append(stop)
        return stop_objects.copy()

    def create_stations(self, stop_collection):
        station_collection = []
        current_stop_name = stop_collection[0].name
        related_stops = [stop_collection[0]]
        for element in stop_collection[1:]:
            if element.name == current_stop_name:
                related_stops.append(element)
            else:
                station = Station(current_stop_name, related_stops.copy())
                station_collection.append(station)
                current_stop_name = element.name
                related_stops.clear()
                related_stops.append(element)
        return station_collection

    def create_itineraries_from_start_to_each_station(self, station_collection, start: Request): #date: str, time: str, search_window: int, catchment_area, start: dict):
        #possible_start_stations = []
        possible_start_coordinates = []
        # first try: find from the start an itinerary to every station
        for item_index, station in enumerate(station_collection):
            station.query_and_create_transit_itineraries(start, "start")
            station.filter_itineraries_with_permissible_catchment_area("start", start.catchment_area)
            station.filter_shortest_itinerary()
            for itinerary in station.itineraries_with_permissible_catchment_area:
                start.add_possible_start_station(itinerary.start_station)
            print(f"{item_index}, {station.name}, shortest itinerary calculated; ")
        start.remove_empty_entries_in_possible_start_station() # because of the declaration of stat_station, there can be empty strings in possible_start_station
        # get the coordinates of the possible start stations and find max distance
        max_distance = 0.0
        for station in station_collection:
            for start_station in start.get_possible_start_stations():
                if station.name == start_station:
                    start_coordinates = {"lat": station.mean_lat, "lon": station.mean_lon}
                    possible_start_coordinates.append(start_coordinates)
                    station.calculate_max_distance_station_to_stop()
                    if station.max_distance_station_to_stop > max_distance:
                        max_distance = station.max_distance_station_to_stop
        # second try: find an itinerary explicit from the possible_start_stations to all stations, which weren't reached in the first try
        # TODO is this even necessery? or is this not find any additional itinerary?
        for station in station_collection:
            if len(station.itineraries_with_permissible_catchment_area) == 0:
                station.queried_itineraries.clear()
                for start_coordinate in possible_start_coordinates:
                    station.query_and_create_transit_itineraries(start, "start")
                station.filter_itineraries_with_permissible_catchment_area("start", max_distance)
                station.filter_shortest_itinerary()
        for station in station_collection:
            station.calculate_travel_time_ratio(start, "start")

    def export_stations_as_geopackage(self, station_collection, filepath, layer_name, poi:Request=None):
        mean_lat_collection = []
        mean_lon_collection = []
        if poi is not None:
            print("poi an export_stations_as_geopackage übergeben")
            mean_lat_collection.append(poi.lat)
            mean_lon_collection.append(poi.lon)
        else:
            mean_lat_collection.append(None)
            mean_lon_collection.append(None)
        for station in station_collection:
            mean_lat_collection.append(station.mean_lat)
            mean_lon_collection.append(station.mean_lon)
        station_attributes = self.create_dataframe_with_station_attributes(station_collection, poi=poi)
        gdf = gpd.GeoDataFrame(station_attributes,
                               geometry=gpd.points_from_xy(mean_lon_collection, mean_lat_collection), crs="EPSG:4326")
        gdf.to_file(filepath, driver='GPKG', layer=layer_name)
        layer = QgsVectorLayer(filepath, layer_name, "ogr") #TODO funktioniert das so?
        QgsProject.instance().addMapLayer(layer)


    def stations_from_otp_to_gpkg(self, export_to_gpkg=True):
        stops_as_dict = self.query_all_stops()
        all_stops = self.create_stop_objects(stops_as_dict)
        all_stations = self.create_stations(all_stops)
        if export_to_gpkg:
            # TODO add filepath elements in GUI
            self.export_stations_as_geopackage(all_stations, "all_stations_without_itineraries", "all_stations_without_itineraries")
        else:
            return all_stations

    def itineraries_data_from_otp_to_geopackage(self, start_or_end_station):
        all_stations = self.stations_from_otp_to_gpkg(export_to_gpkg=False)
        layer_name = self.dlg.le_layer_name.text() #TODO co ntrole, that the name is usable as filename
        if self.dlg.le_filepath_itineraries.text() is not None:
            filepath = self.dlg.le_filepath_itineraries.text()
        else:
            self.iface.messageBar().pushMessage("The filepath has to be selected first")
            return

        if start_or_end_station == "start":
            start = Request(
                lat=self.dlg.le_lat_of_start_end.text(),
                lon=self.dlg.le_lon_of_start_end.text(),
                date=self.dlg.le_date.text(),
                time=self.dlg.le_time.text(),
                search_window=self.dlg.le_searchWindow.text(),
                catchment_area=self.dlg.le_catchment_area.text()
            )
            if start.incorrect_input:
                self.iface.messageBar().pushMessage(start.error_message)
                return
            self.create_itineraries_from_start_to_each_station(all_stations, start)
            self.export_stations_as_geopackage(all_stations, filepath, layer_name, poi=start)

        elif start_or_end_station == "end":
            #end = {"lat": lat, "lon":  lon}
            self.not_implemented_yet()

    def select_output_file(self, current_line_edit): #
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Filepath ", "", '*.gpkg')
        if current_line_edit == "itineraries":
                self.dlg.le_filepath_itineraries.setText(filename)
                index = -6
                layer_name = ""
                while not(filename[index] == "/" or filename[index] == "\\"):
                    layer_name += filename[index]
                    index -= 1
                layer_name = layer_name[::-1] #reverse the string
                self.dlg.le_layer_name.setText(layer_name)

    def set_default_symbology(self):
        layer_collection = QgsProject.instance().layerTreeRoot().children()
        layer_index = self.dlg.cb_layer_symbology.currentIndex()
        layer = layer_collection[layer_index].layer()

        if self.dlg.rb_travel_time_transit.isChecked():
            self.travel_time_symbology(layer)
        elif self.dlg.rb_travel_time_ratio_transit_to_car.isChecked():
            self.travel_time_ratio_symbology(layer)
        self.develop_labeling()

    def symbology_for_particular_points(self, layer):
        range_list = []
        # not reachable stations
        label = "Station not reachable"
        lower_limit = -1
        upper_limit = -1
        symbol = QgsSymbol.defaultSymbol(layer.geometryType())
        black = "#000000"
        symbol.setColor(QtGui.QColor(black))
        range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
        range_list.append(range)

        # start/end point
        label = "Point of interest"
        lower_limit = -2
        upper_limit = -2
        symbol = QgsMarkerSymbol.createSimple({'name': 'square', "size": 4})
        #symbol = QgsSymbol.defaultSymbol(layer.geometryType())
        pink = "#fe019a"
        symbol.setColor(QtGui.QColor(pink))
        range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
        range_list.append(range)


        # #set label for quality category
        # code from here: https://www.geographyrealm.com/labeling-and-map-transparency-qgis-python-programming-cookbook/
        # label = QgsPalLayerSettings()
        # label.readFromLayer(layer)
        # label.enabled = True
        # label.fieldName = "quality_category"
        # label.placement = QgsPalLayerSettings.AroundPoint
        # label.setDataDefinedProperty(QgsPalLayerSettings.Size, True, True,"8")
        # label.writeToLayer(layer)
        return range_list

    def develop_labeling(self):
        """
        Maybe I find her an alternative, where I can do more precide settings:
        https://gis.stackexchange.com/a/469984
        """

        # #code from here: https://gis.stackexchange.com/a/321029
        layer_collection = QgsProject.instance().layerTreeRoot().children()
        layer_index = self.dlg.cb_layer_symbology.currentIndex()
        layer = layer_collection[layer_index].layer()

        text_format = QgsTextFormat()
        label = QgsPalLayerSettings()
        label.fieldName = 'quality_category'
        label.enabled = True
        label.setFormat(text_format)

        # --
        label.placement = QgsPalLayerSettings.Line
        # --

        labeler = QgsVectorLayerSimpleLabeling(label)
        layer.setLabelsEnabled(True)
        layer.setLabeling(labeler)
        layer.triggerRepaint()


    def travel_time_symbology(self, layer):
        target_field = "average_trip_time"
        interval_size = 5
        data_collection = []
        features = layer.getFeatures()
        for row in features:
            data_collection.append(row[target_field])
        data_collection.sort(reverse=True)
        interval_amount = math.ceil(data_collection[0] / interval_size)

        # create own graduated symbol renderer
        colour_progression = ['#0000FF', "#013220", "#FFFF00", "#FFA500",
                              '#800080']  # red: '#FF0000', dark green: #013220
        colour_gradient = self.create_gradient(colour_progression, interval_amount)
        range_list = []
        lower_limit = 0.0
        upper_limit = interval_size
        for index, color in enumerate(colour_gradient):
            print(f"lower_limit: {lower_limit}")
            print(f"upper_limit: {upper_limit}\n")
            label = f"{lower_limit} - {upper_limit} min."
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(QtGui.QColor(color))
            # symbol.setColor(QtGui.QColor(color.hex_l))
            # current_opacity = (interval_size-index)/interval_size
            # symbol.setOpacity(opacity/(index+1))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)
            lower_limit += interval_size
            upper_limit += interval_size

        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()


    def travel_time_ratio_symbology(self, layer):
        target_field = "travel_time_ratio"

        darkgreen = "#00b050"
        green = "#92d050"
        orange = "#ffc000"
        lightred = "#ff0000"
        red = "#c00002"
        darkred = "#5d0000"
        colour_gradient = [darkgreen, green, orange, lightred, red, darkred]
        range_list = []
        limits = [0.0, 1.0, 1.5, 2.1, 2.8, 3.8, 100.0]
        for index, color in enumerate(colour_gradient):
            if index == 5:
                label = "≥3.8"
            else:
                label = f"{limits[index]} to <{limits[index+1]}"
            lower_limit = limits[index]
            upper_limit = limits[index+1]
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)

        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    """
    ChatGPT Code:
    Request: "Python code: Farbverlauf in beliebig vielen Intervallen als list mit Hex code Farbverlauf: Blau, grün, gelb, rot, Lila"
    """

    def hex_to_rgb(self, hex):
        """Convert hex color to RGB tuple."""
        hex = hex.lstrip('#')
        return tuple(int(hex[i:i + 2], 16) for i in (0, 2, 4))

    def rgb_to_hex(self, rgb):
        """Convert RGB tuple to hex color."""
        return '#{:02x}{:02x}{:02x}'.format(*rgb)

    def interpolate_color(self, c1, c2, t, gamma):
        """
        Interpolate between two RGB colors with a given ratio t using a gamma adjustment.
        t_adjusted = t**gamma:
        The interpolation ratio t is adjusted using the gamma value to achieve a curved interpolation.
        By raising t to the power of gamma, transitions between colors are either sharpened or softened
        depending on the value of gamma.
        """

        t_adjusted = t ** gamma
        return tuple(int(c1[i] + (c2[i] - c1[i]) * t_adjusted) for i in range(3))

    def create_gradient(self, colors, n_intervals, gamma=1):
        """
        Create a gradient with given list of colors and number of intervals using a gamma adjustment.

        Args:
        colors (list): List of color hex codes representing the gradient stops.
        n_intervals (int): Number of intervals in the gradient.
        gamma: This parameter controls the interpolation curve. By using a value greater than 1,
        you enhance the differences between the colors, making the interpolation non-linear.
        Essentially, gamma dictates the "intensity" of the transition between the colors.
        For instance, a gamma value of 2.2 will make the transitions more pronounced.

        Returns:
        list: List of hex colors representing the gradient.
        """
        gradient = []
        rgb_colors = [self. hex_to_rgb(color) for color in colors]
        steps_per_segment = n_intervals // (len(colors) - 1)

        for i in range(len(rgb_colors) - 1):
            for j in range(steps_per_segment):
                t = j / steps_per_segment
                color = self. interpolate_color(rgb_colors[i], rgb_colors[i + 1], t, gamma)
                gradient.append(self. rgb_to_hex(color))

        # Append the last color.
        gradient.append(colors[-1])

        return gradient
    """
    end of ChatGPT code
    """



    def not_implemented_yet(self):
        self.iface.messageBar().pushMessage("This function is optional and not implemented yet")
    def testfunction(self):
        print(self.check_grizzly_server_is_running())




    """
    Run is the method, which connects GUI elements to methods and is running, while the plugin is open
    """
    def run(self):
        """Run method that performs all the real work"""
        #console.show_console()
        #print("hallo Welt")
        self.iface.messageBar().pushMessage("HAllo Welt")
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PublicTransitAnalysisDialog()
            self.dlg.pb_start_check_OTP.clicked.connect(self.not_implemented_yet)
            self.dlg.pb_get_stops_from_otp.clicked.connect(self.not_implemented_yet)
            self.dlg.pb_open_explorer_itineraries.clicked.connect(lambda: self.select_output_file("itineraries"))
            self.dlg.pb_get_stations_from_otp.clicked.connect(lambda: self.stations_from_otp_to_gpkg(export_to_gpkg=True))
            self.dlg.pb_start_to_all_stations.clicked.connect(lambda: self.itineraries_data_from_otp_to_geopackage("start"))
            self.dlg.pb_all_stations_to_end.clicked.connect(lambda: self.itineraries_data_from_otp_to_geopackage("end"))
            self.dlg.pb_set_symbology.clicked.connect(self.set_default_symbology)

            self.dlg.pb_develop_labeling.clicked.connect(self.develop_labeling)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children() #Attention this can't go into a layer group
        # Clear the contents of the comboBox from previous runs
        self.dlg.cb_layer_symbology.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.cb_layer_symbology.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("ich schreibe was direkt in die Konsole als Test")
