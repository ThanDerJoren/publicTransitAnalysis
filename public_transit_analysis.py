# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PublicTransitAnalysis
                                 A QGIS plugin
 Heatmap to visualize the connection from one place to all stops of a public Transport net
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Julek Weck
        email                : j.weck@tu-braunschweig.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math

import sys
sys.path.append('C:\\OSGeo4W64\\apps\\qgis\\python')
sys.path.append('C:\\OSGeo4W64\\apps\\qgis\\python\\plugins')

from qgis.core import *
from qgis.gui import *

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant #TODO ist QgsVectorLayer an der richtigen Stelle importiert?
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject, QgsVectorLayer, QgsPalLayerSettings, QgsTextFormat, QgsVectorLayerSimpleLabeling
from qgis.core import QgsStyle, QgsColorRamp, QgsColorRampShader #for a color ramp
from qgis.core import QgsLayerTreeLayer, QgsLayerTreeGroup #to load all layers, also those in groups
from qgis.core import QgsWkbTypes, QgsFillSymbol, QgsSimpleLineSymbolLayer # to set the polygon line to zero
from qgis.core import edit # to change attribute from None to -1
from datetime import time, date, datetime # Don't delete! I use this for objects form request

# personal imports
from console import console
from .stop import Stop
from .station import Station
from .route import Route
from .request import Request
import sys
import requests, json
import geopandas as gpd
import pandas as pd
import processing # to merge polygons by position
from colour import Color # for colour gradients

# downloaded for symbology, don't know which packages I really need: https://docs.qgis.org/testing/en/docs/pyqgis_developer_cookbook/vector.html#appearance-symbology-of-vector-layers
from qgis.core import (

  QgsApplication,

  QgsDataSourceUri,

  QgsCategorizedSymbolRenderer,

  QgsClassificationRange,

  QgsPointXY,

  QgsProject,

  QgsExpression,

  QgsField,

  QgsFields,

  QgsFeature,

  QgsFeatureRequest,

  QgsFeatureRenderer,

  QgsGeometry,

  QgsGraduatedSymbolRenderer,

  QgsMarkerSymbol,

  QgsMessageLog,

  QgsRectangle,

  QgsRendererCategory,

  QgsRendererRange,

  QgsSymbol,

  QgsVectorDataProvider,

  QgsVectorLayer,

  QgsVectorFileWriter,

  QgsWkbTypes,

  QgsSpatialIndex,

  QgsVectorLayerUtils

)


from qgis.core.additions.edit import edit


# This is needed to create own graduated symbol renderer
from qgis.PyQt import QtGui


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .public_transit_analysis_dialog import PublicTransitAnalysisDialog
import os.path


class PublicTransitAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PublicTransitAnalysis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Public Transit Analysis')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PublicTransitAnalysis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/public_transit_analysis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Public Transit Analysis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Public Transit Analysis'),
                action)
            self.iface.removeToolBarIcon(action)

    """
    My own methods
    """

    def check_grizzly_server_is_running(self):
        if self.dlg.rb_automatic_otp_start.isChecked():
            self.iface.messageBar().pushMessage("This is not implemented yet. \nYou have to choose another option")
        elif self.dlg.rb_otp_manually_started_8080.isChecked():
            url = "http://localhost:8080/"
            print(url)
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            if self.dlg.le_port_number.text() != "":
                port_number = self.dlg.le_port_number.text()
                url = f"http://localhost:{port_number}/"
                print(f"request url: {url}")
            else:
                self.iface.messageBar().pushMessage("You have to enter a port number for OTP")
        else:
            self.iface.messageBar().pushMessage("How to start OTP. There has to be at least one option choosen")
        try:
            # Get Url
            get = requests.get(url)
            # if the request succeeds
            if get.status_code == 200:
                return True
            else:
                return False
            # Exception
        except requests.exceptions.RequestException as e:
            self.iface.messageBar().pushMessage("Grizzly server is not running or runs on an different port")
            return False

    def get_request_url(self): #TODO add this to the right functions which need the url
        if self.dlg.rb_otp_manually_started_8080.isChecked():
            return "http://localhost:8080/otp/gtfs/v1"
        elif self.dlg.rb_otp_manually_started_changed_port.isChecked():
            port_number = self.dlg.le_port_number.text()
            return f"http://localhost:{port_number}/otp/gtfs/v1"

    def query_all_stops_incl_departure_times(self, poi:Request):
        unix_timestamp = int(datetime.timestamp(datetime.combine(poi.day, poi.time_start)))
        time_range = poi.search_window
        plan = f"""
            {{stops {{
                gtfsId
                name
                lat
                lon
                vehicleMode
                stoptimesWithoutPatterns(
                    startTime: {unix_timestamp}
                    timeRange: {time_range}
                    numberOfDepartures:100000) {{
                        scheduledDeparture
                        trip {{
                            route {{
                                gtfsId
                                shortName
                            }}
                        }}
                    }}
            }}
            }}
            """
        if self.check_grizzly_server_is_running():
            url = self.get_request_url()
            queried_stops = requests.post(url, json={"query": plan})
            queried_stops = json.loads(queried_stops.content)
            queried_stops = queried_stops["data"]["stops"]
            return queried_stops
        else:
            print("stops could not be queried because OTP is not reachable")


    def create_request_object(self):
        layer_name = self.dlg.le_layer_name.text()  # TODO co ntrole, that the name is usable as filename
        if self.dlg.le_filepath_itineraries.text() is not None:
            filepath = self.dlg.le_filepath_itineraries.text()
        else:
            self.iface.messageBar().pushMessage("The filepath has to be selected first")
            return
        walkspeed_index = self.dlg.cb_walking_speed.currentIndex()
        if walkspeed_index == 0:
            walk_speed = 2 / 3.6
        elif walkspeed_index == 1:
            walk_speed = 4 / 3.6
        elif walkspeed_index == 2:
            walk_speed = 6 / 3.6
        elif walkspeed_index == 3:
            input = self.dlg.le_personalized_tempo.text()
            try:
                walk_speed = float(input) / 3.6
            except ValueError:
                error_message = "The walk_speed has to be a float with '.' as seperator" + "\n"
                self.iface.messageBar().pushMessage(error_message)
                return
        walkingtime_index = self.dlg.cb_max_walking_time.currentIndex()
        if walkingtime_index == 0:
            max_walking_time = 17 * 60  # minutes in seconds
        elif walkingtime_index == 1:
            input = self.dlg.le_max_walking_time.text()
            try:
                max_walking_time = int(input) * 60  # minutes in seconds
            except ValueError:
                error_message = "The max_walking_time has to be an integer" + "\n"
                self.iface.messageBar().pushMessage(error_message)
        poi = Request(
            #TODO make the try except statements not in the setter, but in this method
            lat=self.dlg.le_lat_of_start_end.text(),
            lon=self.dlg.le_lon_of_start_end.text(),
            day=self.dlg.le_date.text(),
            time_start=self.dlg.le_time_start.text(),
            time_end=self.dlg.le_time_end.text(),
            walk_speed=walk_speed,
            max_walking_time=max_walking_time,
            layer_name=layer_name,
            filepath=filepath
        )
        if poi.incorrect_input:
            self.iface.messageBar().pushMessage(poi.error_message)
            return
        return poi

    def create_dataframe_with_station_attributes(self, station_collection, poi:Request):
        """
        Codes of the negative numbers:
        -1: there is no Itinerary to/from this station -> not reachable
        -2: This is the point to which/ from which every itinerary goes

        """

        # The first row of the data frame will be the point to which/ from which every itinerary goes
        name_collection = ["Point of Interest"]
        average_trip_time_collection = [-2]
        car_driving_time_collection = [None]
        travel_time_ratio_collection = [-2]

        average_number_of_transfers_collection = [-2]
        average_walk_distance_of_trip_collection = [-2]
        average_walk_time_collection = [-2]
        itinerary_frequency_collection = [-2]
        selected_itineraries_collection = [None]
        possible_itineraries_collection = [None]
        max_distance_station_to_stop_collection = [None]

        #attributes for the poi object
        date_collection = [None]
        time_start_collection = [None]
        time_end_collection = [None]
        walk_speed_collection = [None]
        max_walking_time_collection = [None]
        catchment_area_collection = [None]
        possible_start_stations_collection = [None]
        quality_category_collection = [None]



        start_station_data = ""
        date_collection[0] = poi.day.isoformat()
        time_start_collection[0] = poi.time_start.isoformat(timespec='minutes')
        time_end_collection[0] = poi.time_end.isoformat(timespec='minutes')
        walk_speed_collection[0] = poi.walk_speed*3.6
        max_walking_time_collection[0] = poi.max_walking_time/60
        catchment_area_collection[0] = poi.catchment_area
        for start_station in poi.get_possible_start_stations():
            data = start_station + ", "
            start_station_data = start_station_data + data
        possible_start_stations_collection[0] = start_station_data
        quality_category_collection[0] = poi.get_letter_of_quality_category()



        for station in station_collection:
            selected_itineraries_data = ""
            start_station_data = ""
            possible_itineraries_data = ""
            name_collection.append(station.name)
            if station.average_trip_time is not None:
                average_trip_time_collection.append(station.average_trip_time)
            else:
                average_trip_time_collection.append(-1)
            car_driving_time_collection.append(station.car_driving_time)
            if station.travel_time_ratio is not None:
                travel_time_ratio_collection.append(station.travel_time_ratio)
            else:
                travel_time_ratio_collection.append(-1)
            if station.average_number_of_transfers is not None:
                average_number_of_transfers_collection.append(station.average_number_of_transfers)
            else:
                average_number_of_transfers_collection.append(-1)
            if station.average_walk_distance_of_trip is not None:
                average_walk_distance_of_trip_collection.append(station.average_walk_distance_of_trip)
            else:
                average_walk_distance_of_trip_collection.append(-1)
            if station.average_walk_time_of_trip is not None:
                average_walk_time_collection.append(station.average_walk_time_of_trip/60) #seconds in minutes
            else:
                average_walk_time_collection.append(-1)
            if station.itinerary_frequency is not None:
                itinerary_frequency_collection.append(station.itinerary_frequency)
            else:
                itinerary_frequency_collection.append(-1)
            for itinerary in station.selected_itineraries:
                data = f"{itinerary.route_numbers}, duration: {itinerary.duration}, walk_distance: {itinerary.walk_distance}, walk_time: {itinerary.walk_time/60}, startStation: {itinerary.start_station}, endStation:{itinerary.end_station};\n"
                selected_itineraries_data = selected_itineraries_data + data
                start_station = itinerary.start_station + ", "
                start_station_data = start_station_data + start_station
            selected_itineraries_collection.append(selected_itineraries_data)
            possible_start_stations_collection.append(start_station_data)
            for itinerary in station.itineraries_with_permissible_catchment_area:
                data = f"{itinerary.route_numbers}, duration: {itinerary.duration}, walk_distance: {itinerary.walk_distance}, walk_time: {itinerary.walk_time/60}, startStation: {itinerary.start_station}, endStation:{itinerary.end_station};\n"
                possible_itineraries_data = possible_itineraries_data + data
            possible_itineraries_collection.append(possible_itineraries_data)
            max_distance_station_to_stop_collection.append(station.max_distance_station_to_stop)


            date_collection.append(poi.day.isoformat())
            time_start_collection.append(poi.time_start.isoformat(timespec='minutes'))
            time_end_collection.append(poi.time_end.isoformat(timespec='minutes'))
            walk_speed_collection.append(poi.walk_speed*3.6)
            max_walking_time_collection.append(poi.max_walking_time/60)
            catchment_area_collection.append(poi.catchment_area)
            quality_category_collection.append(None)



        df = pd.DataFrame(
            {
                "Name": name_collection,
                "travel_time_ratio": travel_time_ratio_collection,
                "number_of_transfers": average_number_of_transfers_collection,
                "itinerary_frequency_[min]": itinerary_frequency_collection,
                "average_trip_time_[min]": average_trip_time_collection,
                "car_driving_time_[min]": car_driving_time_collection,
                "walk_distance_[m]": average_walk_distance_of_trip_collection,
                "walk_time_[m]": average_walk_time_collection,
                "selected_itineraries": selected_itineraries_collection,
                "possible_itineraries": possible_itineraries_collection,
                "max_distance_station_to_stop": max_distance_station_to_stop_collection,
                "date": date_collection,
                "time_start": time_start_collection,
                "time_end": time_end_collection,
                "walk_speed_in_km/h": walk_speed_collection,
                "max_walking_time_in_min": max_walking_time_collection,
                "catchment_area": catchment_area_collection,
                "possible_start_stations": possible_start_stations_collection,
                "quality_category": quality_category_collection

            }
        )
        return df

    def create_dataframe_for_stop_objects(self, stop_collection, poi:Request):
        name_collection = ["Point of Interest"]
        gtfs_id_collection = [None]
        vehicle_mode_collection = [None]
        related_routes_collection = [None]

        # attributes for the poi object
        date_collection = [None]
        time_start_collection = [None]
        time_end_collection = [None]
        walk_speed_collection = [None]
        max_walking_time_collection = [None]
        catchment_area_collection = [None]
        possible_start_stations_collection = [None]
        quality_category_collection = [None]


        start_station_data = ""
        date_collection[0] = poi.day.isoformat()
        time_start_collection[0] = poi.time_start.isoformat(timespec='minutes')
        time_end_collection[0] = poi.time_end.isoformat(timespec='minutes')
        walk_speed_collection[0] = poi.walk_speed * 3.6
        max_walking_time_collection[0] = poi.max_walking_time / 60
        catchment_area_collection[0] = poi.catchment_area
        for start_station in poi.get_possible_start_stations():
            data = start_station + ", "
            start_station_data = start_station_data + data
        possible_start_stations_collection[0] = start_station_data
        quality_category_collection[0] = poi.get_letter_of_quality_category()

        for stop in stop_collection:
            departure_data = ""
            name_collection.append(stop.name)
            gtfs_id_collection.append(stop.gtfs_id)
            vehicle_mode_collection.append(stop.vehicle_mode)
            for route in stop.related_routes:
                departure_times = []
                for departure in route.get_departure_times():
                    departure_times.append(departure.isoformat(timespec='minutes'))
                data = f"{route.short_name}: {departure_times} \n"
                departure_data = departure_data + data
            related_routes_collection.append(departure_data)

            date_collection.append(poi.day.isoformat())
            time_start_collection.append(poi.time_start.isoformat(timespec='minutes'))
            time_end_collection.append(poi.time_end.isoformat(timespec='minutes'))
            walk_speed_collection.append(poi.walk_speed*3.6)
            max_walking_time_collection.append(poi.max_walking_time/60)
            catchment_area_collection.append(poi.catchment_area)
            quality_category_collection.append(None)

        df = pd.DataFrame(
            {
                "name": name_collection,
                "gtfsId": gtfs_id_collection,
                "vehicle_mode": vehicle_mode_collection,
                "related_routes": related_routes_collection,
                "date": date_collection,
                "time_start": time_start_collection,
                "time_end": time_end_collection,
                "walk_speed_in_km/h": walk_speed_collection,
                "max_walking_time_in_min": max_walking_time_collection,
                "catchment_area": catchment_area_collection
            }
        )
        return df


    def create_stop_and_route_objects(self, queried_stops, poi):
        stop_objects = []
        all_routes = []
        for stop in queried_stops:
            route_objects = []
            # first I have to create an object of all possible routes
            # then I can add the departure times to the corresponding routes
            for stop_times in stop["stoptimesWithoutPatterns"]:
                route_gtfsId = stop_times["trip"]["route"]["gtfsId"]
                route_shortName = stop_times["trip"]["route"]["shortName"]
                #check if the routnumber already exists
                route_already_created = False
                for route in route_objects:
                    if route.gtfs_id == route_gtfsId:
                        route_already_created = True
                if not(route_already_created):
                    obj = Route(route_gtfsId, route_shortName, stop["gtfsId"])
                    route_objects.append(obj)
            for stop_times in stop["stoptimesWithoutPatterns"]:
                route_gtfsId = stop_times["trip"]["route"]["gtfsId"]
                seconds_since_midnight = stop_times["scheduledDeparture"]
                m, s = divmod(seconds_since_midnight, 60)
                h, m = divmod(m, 60)
                departure_time = time(hour=h, minute=m, second=s)
                for route in route_objects:
                    if route.gtfs_id == route_gtfsId:
                        route.add_departure_time(departure_time)
                        route.frequency = route.calculate_frequency(poi)
                        all_routes.append(route)
            new_stop = Stop(stop["name"], stop["gtfsId"], stop["lat"], stop["lon"], stop["vehicleMode"], route_objects)
            stop_objects.append(new_stop)
        print(f"length of all_routes list: {len(all_routes)}")
        return stop_objects, all_routes

    def create_stations(self, stop_collection):
        station_collection = []
        current_stop_name = stop_collection[0].name
        related_stops = [stop_collection[0]]
        for element in stop_collection[1:]:
            if element.name == current_stop_name:
                related_stops.append(element)
            else:
                station = Station(current_stop_name, related_stops.copy())
                station_collection.append(station)
                current_stop_name = element.name
                related_stops.clear()
                related_stops.append(element)
        return station_collection

    def create_itineraries_from_start_to_each_station(self, station_collection, poi: Request, route_collection): #date: str, time: str, search_window: int, catchment_area, start: dict):
        #possible_start_coordinates = []
        # first try: find from the start an itinerary to every station
        for item_index, station in enumerate(station_collection):
            station.query_and_create_transit_itineraries(poi, "start")
            station.filter_itineraries_with_permissible_catchment_area("start", poi.catchment_area)
            for itinerary in station.itineraries_with_permissible_catchment_area:
                poi.add_possible_start_station(itinerary.start_station)
                itinerary.frequency = itinerary.calculate_frequency_iterate_directly_through_routes(route_collection)
            station.filter_shortest_itinerary()
        poi.remove_empty_entries_in_possible_start_station() # because of the declaration of stat_station, there can be empty strings in possible_start_station
        for station in station_collection:
            station.calculate_travel_time_ratio(poi, "start")

    def export_stops_as_geopackage(self, stop_collection, poi:Request):
        lat_collection = []
        lon_collection = []
        if poi is not None:
            print("poi an export_stations_as_geopackage übergeben")
            lat_collection.append(poi.lat)
            lon_collection.append(poi.lon)
        else:
            lat_collection.append(None)
            lon_collection.append(None)
        for stop in stop_collection:
            lat_collection.append(stop.lat)
            lon_collection.append(stop.lon)
        station_attributes = self.create_dataframe_for_stop_objects(stop_collection, poi=poi)
        gdf = gpd.GeoDataFrame(station_attributes,
                               geometry=gpd.points_from_xy(lon_collection, lat_collection), crs="EPSG:4326")
        gdf.to_file(poi.filepath, driver='GPKG', layer=poi.layer_name)
        layer = QgsVectorLayer(poi.filepath, poi.layer_name, "ogr")  # TODO funktioniert das so?
        QgsProject.instance().addMapLayer(layer)
    def export_stations_as_geopackage(self, station_collection, poi:Request):
        mean_lat_collection = []
        mean_lon_collection = []
        if poi is not None:
            print("poi an export_stations_as_geopackage übergeben")
            mean_lat_collection.append(poi.lat)
            mean_lon_collection.append(poi.lon)
        else:
            mean_lat_collection.append(None)
            mean_lon_collection.append(None)
        for station in station_collection:
            mean_lat_collection.append(station.mean_lat)
            mean_lon_collection.append(station.mean_lon)
        station_attributes = self.create_dataframe_with_station_attributes(station_collection, poi=poi)
        gdf = gpd.GeoDataFrame(station_attributes,
                               geometry=gpd.points_from_xy(mean_lon_collection, mean_lat_collection), crs="EPSG:4326")
        gdf.to_file(poi.filepath, driver='GPKG', layer=poi.layer_name)
        layer = QgsVectorLayer(poi.filepath, poi.layer_name, "ogr") #TODO funktioniert das so?
        QgsProject.instance().addMapLayer(layer)

    def stops_with_departure_times_from_otp_to_gpkg(self):
        #runtime: about 2s
        start_time = datetime.now()
        poi = self.create_request_object()
        all_stops_as_dict = self.query_all_stops_incl_departure_times(poi=poi)
        all_stops, all_routes = self.create_stop_and_route_objects(all_stops_as_dict, poi)
        self.export_stops_as_geopackage(all_stops, poi=poi)
        end_time = datetime.now()
        print('Duration: {}'.format(end_time - start_time))

    def stations_from_otp_to_gpkg(self):
        #runtime: about 2s
        start_time = datetime.now()
        poi = self.create_request_object()
        stops_as_dict = self.query_all_stops_incl_departure_times(poi=poi)
        all_stops, all_routes = self.create_stop_and_route_objects(stops_as_dict, poi)
        all_stations = self.create_stations(all_stops)
        self.export_stations_as_geopackage(all_stations, poi=poi)
        end_time = datetime.now()
        print('Duration: {}'.format(end_time - start_time))

    def itineraries_data_from_otp_to_geopackage(self, start_or_end_station):
        start_time = datetime.now()
        poi = self.create_request_object()
        stops_as_dict = self.query_all_stops_incl_departure_times(poi=poi)
        all_stops, all_routes = self.create_stop_and_route_objects(stops_as_dict, poi)
        all_stations = self.create_stations(all_stops)

        if start_or_end_station == "start":
            self.create_itineraries_from_start_to_each_station(all_stations, poi, all_routes)
            self.export_stations_as_geopackage(all_stations, poi=poi)

        elif start_or_end_station == "end":
            #end = {"lat": lat, "lon":  lon}
            self.not_implemented_yet()
        end_time = datetime.now()
        print('Duration: {}'.format(end_time - start_time))

    def select_output_file(self, current_line_edit): #
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Filepath ", "", '*.gpkg')
        if current_line_edit == "itineraries":
                self.dlg.le_filepath_itineraries.setText(filename)
                index = -6
                layer_name = ""
                while not(filename[index] == "/" or filename[index] == "\\"):
                    layer_name += filename[index]
                    index -= 1
                layer_name = layer_name[::-1] #reverse the string
                self.dlg.le_layer_name.setText(layer_name)

    def set_symbol_point_or_polygon(self, layer):
        if layer.geometryType() == QgsWkbTypes.PolygonGeometry:
            symbol = QgsFillSymbol.createSimple({'color': '#9b9b9b', 'outline_style': 'no'})
            print(type(symbol))
            return symbol
        elif QgsSymbol.defaultSymbol(layer.geometryType()) == QgsMarkerSymbol:
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            print(type(symbol))
            return symbol
        else:

            return QgsSymbol.defaultSymbol(layer.geometryType())
        

    def set_default_symbology(self):
        root = QgsProject.instance().layerTreeRoot()
        layer_collection = self.get_layers(root, "all")
        layer_index = self.dlg.cb_layer_symbology.currentIndex()
        layer = layer_collection[layer_index]
        symbology_theme = self.dlg.cb_symbology_theme.currentIndex()

        if symbology_theme == 0: self.symbology_travel_time(layer)
        elif symbology_theme == 1: self.symbology_travel_time_ratio(layer)
        elif symbology_theme == 2: self.symbology_frequency(layer)
        elif symbology_theme == 3: self.not_implemented_yet()
        elif symbology_theme == 4: self.symbology_walk_time(layer)
        elif symbology_theme == 5: self.symbology_walk_distance(layer)
        elif symbology_theme == 6: self.symbology_transfer(layer)

        # if self.dlg.cb_symbology_theme.itemData(2) == "travel_time":
        #     self.travel_time_symbology(layer)
        # else:
        #     print("hat nicht funktioniert")

        # if self.dlg.rb_travel_time_transit.isChecked():
        #     self.travel_time_symbology(layer)
        # elif self.dlg.rb_travel_time_ratio_transit_to_car.isChecked():
        #     self.travel_time_ratio_symbology(layer)
        #self.develop_labeling()

    def symbology_for_particular_points(self, layer):
        range_list = []
        # not reachable stations
        label = "Station not reachable"
        lower_limit = -1
        upper_limit = -1
        symbol = self.set_symbol_point_or_polygon(layer)
        grey = "#9b9b9b"
        symbol.setColor(QtGui.QColor(grey))
        range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
        range_list.append(range)

        # start/end point
        label = "Point of interest"
        lower_limit = -2
        upper_limit = -2
        if QgsSymbol.defaultSymbol(layer.geometryType()) == QgsMarkerSymbol:
            symbol = QgsMarkerSymbol.createSimple({'name': 'square', "size": 4})
        else:
            symbol = self.set_symbol_point_or_polygon(layer)
        pink = "#fe019a"
        symbol.setColor(QtGui.QColor(pink))
        range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
        range_list.append(range)


        # #set label for quality category
        # code from here: https://www.geographyrealm.com/labeling-and-map-transparency-qgis-python-programming-cookbook/
        # label = QgsPalLayerSettings()
        # label.readFromLayer(layer)
        # label.enabled = True
        # label.fieldName = "quality_category"
        # label.placement = QgsPalLayerSettings.AroundPoint
        # label.setDataDefinedProperty(QgsPalLayerSettings.Size, True, True,"8")
        # label.writeToLayer(layer)
        return range_list

    def symbology_travel_time(self, layer):
        target_field = "average_trip_time_[min]"
        interval_size = 5
        data_collection = []
        features = layer.getFeatures()
        for row in features:
            if row[target_field] is None:
                row[target_field] = -1 # in case there are None type objects
            data_collection.append(row[target_field])
        data_collection.sort(reverse=True)
        interval_amount = math.ceil(data_collection[0] / interval_size)

        colour_gradient = self.get_colors("Turbo", interval_amount)

        range_list = []
        lower_limit = 0.0
        upper_limit = interval_size
        for index, color in enumerate(colour_gradient):
            print(f"lower_limit: {lower_limit}")
            print(f"upper_limit: {upper_limit}\n")
            label = f"{lower_limit}< to ≤{upper_limit} min."
            symbol = self.set_symbol_point_or_polygon(layer)#QgsSymbol.defaultSymbol(layer.geometryType())
            symbol.setColor(QtGui.QColor(color))
            # symbol.setColor(QtGui.QColor(color.hex_l))
            # current_opacity = (interval_size-index)/interval_size
            # symbol.setOpacity(opacity/(index+1))
            sector = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(sector)
            lower_limit += interval_size
            upper_limit += interval_size

        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    def symbology_travel_time_ratio(self, layer):
        target_field = "travel_time_ratio"

        darkgreen = "#00b050"
        green = "#92d050"
        orange = "#ffc000"
        lightred = "#ff0000"
        red = "#c00002"
        darkred = "#5d0000"
        colour_gradient = [darkgreen, green, orange, lightred, red, darkred]
        range_list = []
        limits = [0.0, 1.0, 1.5, 2.1, 2.8, 3.8, 100.0]
        for index, color in enumerate(colour_gradient):
            if index == 5:
                label = "≥3.8"
            else:
                label = f"{limits[index]}< to ≤{limits[index+1]}"
            lower_limit = limits[index]
            upper_limit = limits[index+1]
            symbol = self.set_symbol_point_or_polygon(layer)
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)

        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    def symbology_frequency(self, layer):
        target_field = "itinerary_frequency_[min]"
        range_list = []
        colour_gradient = self.get_colors("PuRd", 7)
        colour_gradient.reverse()
        #limits = [0, 5, 8, 10, 15, 20, 30, 40, 60, 120, 1440]
        limits = [0,5,10,20,40,60,120,1440] #1440min = 1trip per day

        for index, color in enumerate(colour_gradient):
            if index == 9:
                label = ">120 min"
            else:
                label = f"{limits[index]}< to ≤{limits[index+1]} min frequency" # f"{limits[index+1]} min frequency"
            lower_limit = limits[index] #exclusive
            upper_limit = limits[index + 1] #inclusive
            symbol = self.set_symbol_point_or_polygon(layer)
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)
        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    def symbology_walk_time(self, layer):
        target_field = "walk_time_[m]"
        range_list = []
        interval_size = 5
        data_collection = []
        features = layer.getFeatures()
        for row in features:
            data_collection.append(row[target_field])
        data_collection.sort(reverse=True)
        interval_amount = math.ceil(data_collection[0] / interval_size)
        colour_gradient = self.get_colors("Purples", interval_amount)
        colour_gradient.reverse()

        lower_limit = 0.0
        upper_limit = interval_size
        for index, color in enumerate(colour_gradient):
            label = f"{lower_limit}< to ≤{upper_limit} min walktime"
            symbol = self.set_symbol_point_or_polygon(layer)
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)
            lower_limit += interval_size
            upper_limit += interval_size
        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    def symbology_walk_distance(self, layer):
        target_field = "walk_distance_[m]"
        range_list = []
        colour_gradient = self.get_colors("Purples", 7)
        colour_gradient.reverse()
        limits = [0,100, 200, 300, 500, 750, 1000, 5000]  # 1440min = 1trip per day

        for index, color in enumerate(colour_gradient):
            if index == 6:
                label = ">1000m walkdistance"
            else:
                label = f"{limits[index]}< to ≤{limits[index + 1]} m walkdistance"  # f"{limits[index+1]} min frequency"
            lower_limit = limits[index]  # exclusive
            upper_limit = limits[index + 1]  # inclusive
            symbol = self.set_symbol_point_or_polygon(layer)
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)
        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()


    def symbology_transfer(self, layer):
        target_field = "number_of_transfers"
        range_list = []
        colour_gradient = self.get_colors("Oranges", 4)
        colour_gradient.reverse()
        limits = [0.0, 0.0, 1.0, 2.0, 100.0]
        for index, color in enumerate(colour_gradient):
            if index == 3:
                label = "≥3"
            else:
                label = f"{index} transfers"
            lower_limit = limits[index] #exclusive
            upper_limit = limits[index + 1] #inclusive
            symbol = self.set_symbol_point_or_polygon(layer)
            symbol.setColor(QtGui.QColor(color))
            range = QgsRendererRange(lower_limit, upper_limit, symbol, label)
            range_list.append(range)
        range_of_particular_points = self.symbology_for_particular_points(layer)
        range_list.extend(range_of_particular_points)

        trip_time_renderer = QgsGraduatedSymbolRenderer(target_field, range_list)
        classification_method = QgsApplication.classificationMethodRegistry().method("EqualInterval")
        trip_time_renderer.setClassificationMethod(classification_method)
        trip_time_renderer.setClassAttribute(target_field)

        layer.setRenderer(trip_time_renderer)
        layer.triggerRepaint()

    """
    ChatGPT Code:
    Request: In der QGIS Python API gibt es die Klasse QgsColorRamp. Ich möchte die ColorRamp Turbo von Qgis erstellen und auf die Hexcodes dieser ColorRamp zugreifen
    """

    def get_hex_from_color(self, color: QColor) -> str:
        """Convert a QColor to a hex string."""
        return color.name()

    def get_colors(self, ramp_name, num_colors):
        # Lade den QGIS Stil und hole die Turbo Color Ramp
        style = QgsStyle.defaultStyle()
        #ramp_name = "Turbo"
        color_ramp = style.colorRamp(ramp_name)

        if not color_ramp:
            print(f"Error: Color ramp '{ramp_name}' not found.")
            return
        else:
            # Erstelle eine Liste, um die Hex-Codes zu speichern
            hex_colors = []

            for i in range(num_colors):
                # Bestimme die Position auf der Farbrampe (von 0 bis 1)
                position = i / (num_colors - 1)

                # Hole die Farbe an dieser Position
                color = color_ramp.color(position)

                # Konvertiere die Farbe in einen Hex-Code und füge sie der Liste hinzu
                hex_colors.append(self.get_hex_from_color(color))
            return hex_colors

    """Request: Ich greife mit folgendem code auf die QGis Layer zu. Leider werden layer, die in Gruppen liegen nicht angezigt. Wie sieht der Code aus, damit auch layer in Gruppen gefunden werden:
    Request2: im folgenden code werden alle Layer in eine Combobox geladen. Ich möchte jetzt nur point layer in eine Combobox laden. Was muss ich ändern? Kommentare im Code bitte auf Englisch:"""

    def get_layers(self, root, layer_type="all"):
        layers = []
        nodes = root.children()

        for node in nodes:
            if isinstance(node, QgsLayerTreeLayer):
                layer = node.layer()
                # Check if the layer is a vector layer before filtering for geometry type
                if isinstance(layer, QgsVectorLayer):
                    # Filter layers based on the specified layer_type
                    if layer_type == "all" or \
                            (layer_type == "points" and layer.geometryType() == QgsWkbTypes.PointGeometry) or \
                            (layer_type == "polygons" and layer.geometryType() == QgsWkbTypes.PolygonGeometry):
                        layers.append(layer)
            elif isinstance(node, QgsLayerTreeGroup):
                # If the node is a group, recursively get layers from the group
                layers.extend(self.get_layers(node, layer_type))

        return layers

    def load_layers_in_combobox(self):
        # Fetch the currently loaded layers including those in groups
        root = QgsProject.instance().layerTreeRoot()
        all_layers = self.get_layers(root, "all")
        # Clear the contents of the comboBox from previous runs
        self.dlg.cb_layer_symbology.clear()
        # Populate the comboBox with names of the specified type of layers
        self.dlg.cb_layer_symbology.addItems([layer.name() for layer in all_layers])



    """   
    end of ChatGPT code
    """



    def not_implemented_yet(self):
        self.iface.messageBar().pushMessage("This function is optional and not implemented yet")




    """
    Run is the method, which connects GUI elements to methods and is running, while the plugin is open
    """
    def run(self):
        """Run method that performs all the real work"""
        #console.show_console()
        #print("hallo Welt")
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PublicTransitAnalysisDialog()
            self.dlg.pb_start_check_OTP.clicked.connect(self.not_implemented_yet)
            self.dlg.pb_get_stops_from_otp.clicked.connect(self.stops_with_departure_times_from_otp_to_gpkg)
            self.dlg.pb_open_explorer_itineraries.clicked.connect(lambda: self.select_output_file("itineraries"))
            self.dlg.pb_get_stations_from_otp.clicked.connect(self.stations_from_otp_to_gpkg)
            self.dlg.pb_start_to_all_stations.clicked.connect(lambda: self.itineraries_data_from_otp_to_geopackage("start"))
            #self.dlg.pb_all_stations_to_end.clicked.connect(lambda: self.itineraries_data_from_otp_to_geopackage("end"))
            self.dlg.pb_set_symbology.clicked.connect(self.set_default_symbology)
            self.dlg.pb_reload_layer_cb.clicked.connect(self.load_layers_in_combobox)

        self.load_layers_in_combobox()

        # # Fetch the currently loaded layers
        # layers = QgsProject.instance().layerTreeRoot().children() #Attention this can't go into a layer group
        # # Clear the contents of the comboBox from previous runs
        # self.dlg.cb_layer_symbology.clear()
        # # Populate the comboBox with names of all the loaded layers
        # self.dlg.cb_layer_symbology.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.iface.messageBar().pushMessage("Until next time")
